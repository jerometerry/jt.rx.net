<?xml version="1.0" encoding="utf-8"?>
<topic id="eca1751c-497d-472f-8734-07b05a0db91a" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Below are the key operations in Potassium</para>
    </introduction>

    <para>
        <list class="bullet">
          <listItem>
            <legacyBold>Accum</legacyBold> - Accum converts an Event, an initial value, and a snapshot function into a Behavior that accumulates a value as the Event fires.

            <para>An example would having a running sum total, starting with an initial value and using the addition operation as the snapshot.</para>
          </listItem>

          <listItem>
            <legacyBold>Apply</legacyBold> - Apply is the process of taking a Behavior and a Behavior of mapping functions, to produce of a new Behavior of the return type of the mapping function inside the Behavior. This is the primitive for Behavior lifting.
          </listItem>

          <listItem>
            <legacyBold>Coalesce</legacyBold> - Coalesce is the process of combining several simultaneous values into a single value.
          </listItem>

          <listItem>
            <legacyBold>Collect</legacyBold> - Collect transforms an Event or Behavior with a generalized state loop (a mealy machine). The function is passed the input and the old state and returns the new state and output value.
          </listItem>

          <listItem>
            <legacyBold>Filter</legacyBold> - Filters Event values based on a predicate, similar to the LINQ Where method.
          </listItem>

          <listItem>
            <legacyBold>Fire</legacyBold> - Firing is the process of sending a value through an Event.
          </listItem>

          <listItem>
            <legacyBold>Gate</legacyBold> - Gating is the process of now allowing Firing values that don't evaluate to true through a given gate predicate.
          </listItem>

          <listItem>
            <legacyBold>Hold</legacyBold> - A Hold is an operation on an Event given an initial value, that creates a Behavior with the initial value that updates whenever the Event fires.
          </listItem>

          <listItem>
            <para>
              <legacyBold>Lift</legacyBold> - Lifting is the process of taking a multi-valued function (2 or 3 valued functions in Potassium), along with Behaviors for each value of the function, and creating a new Behavior that is computed by evaluating the function with the current values of each of the Behaviors values.
            </para>

            <para>A lifted Behavior has the property that if any of the input Behaviors are modified simultaneously, the lifted Behavior should fire only once.</para>

            <para>
              <legacyBold>Lift Glitch</legacyBold> - A lift glitch occurs if a lifted Behavior fires multiple times in response to simultaneous updates of it's input Behaviors.
            </para>
          </listItem>

          <listItem>
            <legacyBold>Map</legacyBold> - A map is the process of converting an Event or Behavior from one type to another, by supplying a mapping function.
          </listItem>

          <listItem>
            <legacyBold>Merge</legacyBold> - Merging is the process of combining two Events of the same type into a single Event, using a coalesce (combining) function.
          </listItem>

          <listItem>
            <legacyBold>Repeat</legacyBold> - Repeating is a way of chaining together Events. Given an Event e and an EventRepeater f, f.Repeat(e) will cause firings on e to be fired on f.
          </listItem>

          <listItem>
            <legacyBold>Snapshot</legacyBold> - Snapshot is the process of sampling a Behaviors value at the time of an Event firing, and producing a value (a snapshot) by passing the value of the Behavior at the time of the firing and the value fired on the Event into a snapshot function.
          </listItem>

          <listItem>
            <legacyBold>Switch</legacyBold> - Switch is the process of unwrapping a Behavior of Behaviors or a Behavior of Events into the inner Behavior or Event. Switch allows the reactive network to change dynamically, using reactive logic to modify reactive logic.
          </listItem>
        </list>
    </para>
    
    <relatedTopics>
    </relatedTopics>
    
  </developerConceptualDocument>
</topic>
