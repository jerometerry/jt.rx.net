<?xml version="1.0" encoding="utf-8"?>
<topic id="94b28a86-db26-45b3-b4f0-264d507ef1ea" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Required introduction</para>
    </introduction>

    <section>
      <title>Related Concepts</title>
      <content>
        <para>Below are some additional concepts to be aware of inside of the Potassium library.</para>

        <list class="bullet">
          <listItem>
            <legacyBold>Transaction</legacyBold> - A Transaction is used to provide the concept of simultaneous Events.

            <para>In Potassium, only one Transaction can be open at a time. A Transaction is requested when registering a listener, or when firing a value. A Transaction is closed when the initial request that created the Transaction completes.</para>

            <para>Firing and listening can cause a chain reaction of operations that may cause other firing and listening operations. This chain of operations will all execute inside the same Transaction.</para>

            <para>Once a Transaction has been opened, actions can be added to it, using the High, Medium and Low methods.</para>

            <para>High registers the action on a Priority Queue using a Rank to order. Medium and Low are run in the order they are added.</para>

            <para>All High priority actions are run first (using Priority Queue), all Medium Priority actions second (by order added), and all Low priority actions third (by order added).</para>

            <para>High, Medium and Low priority actions are run when the Transaction is closed when the operation that requested the Transaction completes.</para>
          </listItem>

          <listItem>
            <legacyBold>Priority</legacyBold> - Priority is used to determine the order to execute High priority items in a Transaction. A lower priority value executes before a higher priority, as is typically with Priority Queues.

            <para>A Priority is assigned to an Observable, with a default priority of zero. A Priority has an operation to add a superior, with a class invariant that all superiors must have a higher priority than their subordinates.</para>

            <para>An Observables Priority can be modified (increased) when it registers itself to listen to another Observable. The subscribers priority should be higher than the source rank, so that the source rank High operations in a Transaction execute before those of their subscribers.</para>

            <para>The Priority of an Observable is used when registering High priority actions on a Transaction, as a means to ensure actions are run on a priority basis.</para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
